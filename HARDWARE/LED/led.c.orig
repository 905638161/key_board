
#include "sys.h"
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

//初始化PB5和PE5为输出口.并使能这两个口的时钟
//LED IO初始化
void LED_Init(void)
{
    GPIO_InitTypeDef  GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);	 //使能PE端口时钟

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				 //LED0-->PB.0端口配置
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
    GPIO_Init(GPIOE, &GPIO_InitStructure);					 //根据设定参数初始化GPIOB.0
    GPIO_SetBits(GPIOE, GPIO_Pin_8);						 //PB.0输出高
}

//LED灯的闪烁程序
void LED_Flash (void)
{
    static u32 temp;
    temp++;
    if(temp < 500000)
        LED1 = 1;      //FLAG输出高
    else if(temp < 1000000)
        LED1 = 0;      //FLAG输出低
    else temp = 0;

}

/**
  * @brief  初始化报警灯控制的IO口
  * @param  None
  * @retval None
  */
void Alarm_LED_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);	 //使能PD端口时钟

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;//最高输出速率2MHz
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//推挽输出
    GPIO_Init(GPIOD, &GPIO_InitStructure);//初始化外设GPIOx寄存器

}
/**
* @brief 高级报警灯闪烁
* @param module：模式，判断高级报警灯的闪烁方式，一种全闪烁，另外是一种半闪烁。
* @return None
* @details 判断高级和中级、高级和低级、高级三种情况
*/
void Alarm_High_LedFlash(u8 module)
{
    if(module == Alarm_High_and_Medium_Flag)    //高级和中级报警
    {
        if(Flag_250ms)
        {
            PDout(9) = 1;
            PDout(10) = 0;
        }
        else
        {
            PDout(9) = 0;
            PDout(10) = 0;
        }
    }
    else if(module == Alarm_High_and_Low_Flag)	//高级和低级报警
    {
        if(Flag_250ms)
        {
            PDout(9) = 1;
            PDout(10) = 0;
        }
        else
        {
            PDout(9) = 0;
            PDout(10) = 0;
        }
    }
    else if(module == Alarm_High_Flag)       //高级报警
    {
        if(Flag_250ms)
        {
            PDout(9) = 1;
            PDout(10) = 0;
            PDout(9) = 0;
            PDout(10) = 1;
        }
        else
        {
            PDout(9) = 0;
            PDout(10) = 0;
        }
    }

}

/**
* @brief 中级报警灯闪烁
* @param module:输入报警状态相关的标志位
* @return 判断高级和中级、中级两种情况
*/
void Alarm_Medium_LedFlash(u8 module)
{
    if(module == Alarm_High_and_Medium_Flag)	//高级和中级报警
    {
        if(Flag_1s)
        {
            PDout(8) = 1;
            PDout(11) = 0;
        }
        else
        {
            PDout(8) = 0;
            PDout(11) = 0;
        }
    }
    else if(module == Alarm_Medium_Flag)		//中级报警
    {
        if(Flag_1s)
        {
            PDout(8) = 1;
            PDout(11) = 0;
            PDout(8) = 0;
            PDout(11) = 1;
        }
        else
        {
            PDout(8) = 0;
            PDout(11) = 0;
        }

    }
}
/**
* @brief 低级报警灯常亮
* @param module:输入报警状态，报警灯执行响应的动作
* @return None
* @details 判断高级和低级、低级两种情况
*/
void Alarm_Low_LedFlash(u8 module)
{
    if(module == Alarm_High_and_Low_Flag)		//低级和高级报警
    {
        PDout(8) = 1;
        PDout(11) = 0;
    }
    else if(module == Alarm_Low_Flag)           //低级报警
    {
        PDout(8) = 1;
        PDout(11) = 0;
        PDout(8) = 0;
        PDout(11) = 1;
    }
}
/**
* @brief 报警灯清除
* @param module:输入报警状态，报警灯执行响应的动作
* @return None
* @details 无报警时的动作
*/
void Alarm_Clear_LedFlash(u8 module)
{
    if(module == Alarm_None_Flag)
    {
        PDout(8) = 0;
        PDout(9) = 0;
        PDout(10) = 0;
        PDout(11) = 0;
    }
}

/**
 * @brief a short description of what the function does
 * @param the first input value
 * @return the return value
 * @details a full description of what the function does
**/
void Alarm_LED_Flash(u8 module)
{

    switch(module)
    {
    case Alarm_High_Flag:     //红灯闪烁
        if(Flag_250ms)
        {
            PDout(9) = 1;
            PDout(10) = 0;
        }
        else
        {
            PDout(9) = 0;
            PDout(10) = 0;
        }
        break;
    case Alarm_Medium_Flag:  //黄灯闪烁
        if(Flag_1s)
        {
            PDout(8) = 1;
            PDout(11) = 0;
            PDout(8) = 0;
            PDout(11) = 1;
        }
        else
        {
            PDout(8) = 0;
            PDout(11) = 0;
        }
        break;
    case Alarm_Low_Flag:    //黄灯常亮
        PDout(8) = 1;
        PDout(11) = 0;
        PDout(8) = 0;
        PDout(11) = 1;
        break;
    case Alarm_High_and_Medium_Flag:
        /**左半边高级报警灯闪烁**/
        if(Flag_250ms)
        {
            PDout(9) = 1;
            PDout(10) = 0;
        }
        else
        {
            PDout(9) = 0;
            PDout(10) = 0;
        }
        /**右半边中级报警灯闪烁**/
        if(Flag_1s)
        {
            PDout(8) = 1;
            PDout(11) = 0;
        }
        else
        {
            PDout(8) = 0;
            PDout(11) = 0;
        }
        break;
    case Alarm_High_and_Low_Flag:
        /**左半边高级报警灯闪烁**/
        if(Flag_250ms)
        {
            PDout(9) = 1;
            PDout(10) = 0;
        }
        else
        {
            PDout(9) = 0;
            PDout(10) = 0;
        }
        /**右半边低级报警灯常亮**/
        PDout(8) = 1;
        PDout(11) = 0;
        break;
    case Medium_Flag_and_Low_Flag:
		/**黄灯闪烁**/	
        if(Flag_1s)
        {
            PDout(8) = 1;
            PDout(11) = 0;
            PDout(8) = 0;
            PDout(11) = 1;
        }
        else
        {
            PDout(8) = 0;
            PDout(11) = 0;
        }
        break;
    case Alarm_None_Flag:
		
        PDout(8) = 0;
        PDout(9) = 0;
        PDout(10) = 0;
        PDout(11) = 0;
        break;
    default:
		PDout(8) = 0;
        PDout(9) = 0;
        PDout(10) = 0;
        PDout(11) = 0;
        break;
    }
}
