
#include "usart.h"
#include "datahandle.h"

//////////////////////////////////////////////////////////////////////////////////
// STM32串口配置的一般步骤(库函数)
//(1)串口时钟使能：RCC_APBxPeriphClockCmd();
//    GPIO时钟使能：RCC_AHBxPeriphClockCmd();
//(2)引脚复用映射：GPIO_PinAFConfig(); 引脚是否使用了复用映射引脚
//(3)GPIO端口模式配置：GPIO_Init(); 模式配置为GPIO_Mode_AF
//(4)串口参数初始化：USART_Init();
//(5)开启中断并且初始化NVIC（如果需要开启中断才需要这个步骤）
//    NVIC_Init();
//    USART_ITConfig();
//(6)使能串口：USART_Cmd();
//(7)编写中断处理函数：USARTx_IRQHandler();
//(8)串口数据收发：
//    void USART_SendData();//发送数据到串口，DR
//    uint16_t USART_ReceiveData();//接收数据，从DR读取接收的数据
//(9)串口传输状态获取：
//    FlagStatus USART_GetFlagStatus();
//    void USART_ClearITPendingBit();

ALARM_SET		Alarm_Set;
KEY_LED_SET		KEY_LED_Set;
FLOW_METER_SET	Flow_meter_Set;
IRAM_CAL		IRAM_Cal;
OXYGEN_SET		Oxygen_Set;
EFLOWMETER_SET	EflowMeter_Set;
GET_ID			Get_Id;

//tyestruct {
//    u8 voice;
//    u8 alarm_priority;
//    u8 silence;
//    u8 alarm_led;
//} Alarm_Set;			//报警设置

//struct {
//    u16 KEY_LED;
//} KEY_LED_Set;  		//按键LED设置

//struct {
//    u8 balance;
//    u8 FiO2;
//    u16 Flow;
//} Flow_meter_Set;  //电子流量计设置

//struct {
//    u8 Item;
//    u8 value;
//} IRAM_Cal;        //麻醉气体模快校验

//struct {
//    u8 Id;
//} Oxygen_Set; //顺磁氧校验

//struct {
//    u8 Id;
//} EflowMeter_Set; //电子流量计校验

//struct {
//    u8 Id;
//} Get_Id;     //获取ID


//初始化IO 串口1
//bound:波特率

/*---------------------------- USART1 Mode Configuration -----------------------*/
u8  USART1_Buffer[256];      //接收缓存区
u8  USART2_Sta = 0;          //接收缓存标志

u32 USART_TXD_REGISTER = 0;
u16 USART_RXD_REGISTER = 0;

u8 	IrmaSlowParas_AA1_ID;
u8 	IrmaSlowParas_AA2_ID;
u16 IrmaSlowParas_AtmPress;
u8 	N2OComp_Enable_Flag;
u8  AA_ZeroEnable_Flag;

/*---------------------------- USART3 Mode Configuration -----------------------*/
/**
  * @brief  USART3初始化，PB10、PB11默认口不需要映射向USART2
  * @param  baud: Set the communication baud rate
  * @retval None
  */
void USART3_Init(u32 baud)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE );

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; //USART3 TX；
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出；
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure); //端口B；PB10

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11; //USART3 RX；
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //浮空输入；
    GPIO_Init(GPIOB, &GPIO_InitStructure); //端口B；PB11

    USART_InitStructure.USART_BaudRate = baud; //波特率；
    USART_InitStructure.USART_WordLength = USART_WordLength_8b; //数据位8位；
    USART_InitStructure.USART_StopBits = USART_StopBits_1; //停止位1位；
    USART_InitStructure.USART_Parity = USART_Parity_No ; //无校验位；
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件流控；
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//收发模式；
    USART_Init(USART3, &USART_InitStructure);//配置串口参数；

//    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置中断组2，0―3抢占优先级，0―3响应优先级；

    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn; //中断号；
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; //抢占优先级；
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; //响应优先级；
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
    USART_Cmd(USART3, ENABLE); //使能串口；
}
/**
  * @brief  Transmits single data through the USART3 peripheral.
  * @param  Data：The data to transmit.
  * @retval None
  */
void USART3_Send_Byte(u8 Data) //发送一个字节；
{
    USART_SendData(USART3, Data);
    while( USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET );
}
/**
  * @brief  Transmits string data through the USART3 peripheral.
  * @param  Data：The data to transmit.
  * @retval None
  */
void USART3_Send_String(u8 *Data) //发送字符串；
{
    while(*Data)
        USART3_Send_Byte(*Data++);
}
/**
  * @brief  USART3 interrupt handing function.
  * @param  None
  * @retval None
  */
void USART3_IRQHandler(void) //中断处理函数；
{
    u8 res;
    if(USART_GetITStatus(USART3, USART_IT_RXNE) == SET) //判断是否发生中断；
    {
        USART_ClearFlag(USART3, USART_IT_RXNE); //清除标志位；
        res = USART_ReceiveData(USART3); //接收数据；
        USART3_Send_Byte(res); //用户自定义；

    }
}

/*---------------------------- UART4 Mode Configuration -----------------------*/
/**
  * @brief  UART4初始化 PC10,PC11
  * @param  baud: Set the communication baud rate
  * @retval None
  */
void UART4_Init(u32 baud)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE );
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE );

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; //UART4 TX；
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出；
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure); //端口C；

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11; //UART4 RX；
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //浮空输入；
    GPIO_Init(GPIOC, &GPIO_InitStructure); //端口C；

    USART_InitStructure.USART_BaudRate = baud; //波特率；
    USART_InitStructure.USART_WordLength = USART_WordLength_8b; //数据位8位；
    USART_InitStructure.USART_StopBits = USART_StopBits_1; //停止位1位；
    USART_InitStructure.USART_Parity = USART_Parity_No ; //无校验位；
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件流控；
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//收发模式；
    USART_Init(UART4, &USART_InitStructure);//配置串口参数；

//    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置中断组2，0-3抢占优先级，0-3响应优先级；

    NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn; //中断号；
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; //抢占优先级；
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; //响应优先级；
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
    USART_Cmd(UART4, ENABLE); //使能串口；
}
/**
  * @brief  Transmits single data through the UART4 peripheral.
  * @param  Data：The data to transmit.
  * @retval None
  */
void UART4_Send_Byte(u8 Data) //发送一个字节；
{
    USART_SendData(UART4, Data);
    while( USART_GetFlagStatus(UART4, USART_FLAG_TC) == RESET );
}
/**
  * @brief  Transmits string data through the UART4 peripheral.
  * @param  Data：The data to transmit.
  * @retval None
  */
void UART4_Send_String(u8 *Data) //发送字符串；
{
    while(*Data)
        UART4_Send_Byte(*Data++);
}
/**
  * @brief  UART4 interrupt handing function.
  * @param  None
  * @retval None
  */
void UART4_IRQHandler(void) //中断处理函数；
{
    u8 res;
    if(USART_GetITStatus(UART4, USART_IT_RXNE) == SET) //判断是否发生中断；
    {
        USART_ClearFlag(UART4, USART_IT_RXNE); //清除标志位；
        res = USART_ReceiveData(UART4); //接收数据；
        /**
        ******************************************
        **/
        UART4_Send_Byte(res); //用户自定义；
    }
}

/*---------------------------- UART5 Mode Configuration -----------------------*/
/**
  * @brief  UART5初始化 PC10,PC11
  * @param  baud: Set the communication baud rate
  * @retval None
  */
void UART5_Init(u32 baud)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE );
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE );

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12; //UART5 TX；
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出；
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure); //端口C；

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; //UART5 RX；
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //浮空输入；
    GPIO_Init(GPIOD, &GPIO_InitStructure); //端口D；

    USART_InitStructure.USART_BaudRate = baud; //波特率；
    USART_InitStructure.USART_WordLength = USART_WordLength_8b; //数据位8位；
    USART_InitStructure.USART_StopBits = USART_StopBits_1; //停止位1位；
    USART_InitStructure.USART_Parity = USART_Parity_No ; //无校验位；
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件流控；
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//收发模式；
    USART_Init(UART5, &USART_InitStructure);//配置串口参数；


//    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置中断组2，0-3抢占优先级，0-3响应优先级；

    NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn; //中断号；
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; //抢占优先级；
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; //响应优先级；
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);


    USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);
    USART_Cmd(UART5, ENABLE); //使能串口；
}
/**
  * @brief  Transmits single data through the UART5 peripheral.
  * @param  Data：The data to transmit.
  * @retval None
  */
void UART5_Send_Byte(u8 Data) //发送一个字节；
{
    USART_SendData(UART5, Data);
    while( USART_GetFlagStatus(UART5, USART_FLAG_TC) == RESET );
}
/**
* @brief 发送一串的数据
* @param
**len: 数据的长度
**data:发送数据的首地址
* @return None
* @details 套用了USART5的发送一个字节的函数
*/
void UART5_Send_Data(u8 len, u8 *data)
{
    u8 i = 0;
    for(i = 0; i < len; i++)
    {
        UART5_Send_Byte(*data++);
    }
}

/**
  * @brief  Transmits string data through the UART5 peripheral.
  * @param  Data：The data to transmit.
  * @retval None
  */
void UART5_Send_String(u8 *Data) //发送字符串，字符串的末尾为零
{
    while(*Data)
        UART5_Send_Byte(*Data++);
}
/**
  * @brief  UART5 interrupt handing function.
  * @param  None
  * @retval None
  */
void UART5_IRQHandler(void) //中断处理函数；
{

    static u8 	Uart5RxBuffer[30] = {0};
    static u8 	LastData = 0;
    static u16	Wait_Syn = TRUE;
    static u8	Rx_num = 0;
//    static u8   Tx_num = 0;

    u8 data = 0;
    u8 sum = 0;
    u8 i = 0;
    u8 Data_ID = 0xFF;
    u8 Data_Len;
    if(USART_GetITStatus(UART5, USART_IT_RXNE) == SET) //判断是否发生中断；
    {
        if (Wait_Syn == TRUE)  				  //判断起始标志0xaa,0x55,是否完成
        {
            data = USART_ReceiveData(UART5); //接收数据；
            if((LastData == 0xAA) && (data == 0x55))
            {
                Wait_Syn = FALSE;
            }
            LastData = data;
        }
        else
        {
            Uart5RxBuffer[Rx_num++] = USART_ReceiveData(UART5);
            if(Rx_num >= Uart5RxBuffer[0] - 2)
            {
                for (i = 0; i <= Uart5RxBuffer[0] - 2 - 1; i++) //len-flag0-flag1
                {
                    sum += Uart5RxBuffer[i];
                }
                if(!sum)
                {
                    Data_Len = Uart5RxBuffer[0];
                    Data_ID = Uart5RxBuffer[1];

                    switch(Data_ID)
                    {
                    case ALARM_SET_ID:
                        for (i = 2; i < Data_Len - 3; i++)
                        {
                            AlarmSet_Receive_Data[i - 2] = Uart5RxBuffer[i];
                        }
                        break;
                    case KEY_LED_SET_ID:
                        for(i = 2; i < Data_Len - 3; i++)
                        {
                            KeyLED_Receive_Data[i - 2] = Uart5RxBuffer[i];
                        }
                        break;
                    case EFLOW_SET_ID:
						 for(i = 2; i < Data_Len - 3; i++)
                        {
							ElectronicFlowmeter_Set_Receive_Data[i-2]=Uart5RxBuffer[i];
                        }
                        break;
                    case IRMA_CAL_ID:
						for(i = 2; i < Data_Len - 3; i++)
                        {
							AA_ETCO2_Calibration_Receive_Data[i-2]=Uart5RxBuffer[i];
						}
                        break;
                    case OXYGEN_CAL_ID:
                        FIO2_Calibration_Receive_Data= Uart5RxBuffer[2];
                        break;
                    case EFLOWMETER_SET_ID:
                        ElectronicFlowmeter_Calibration_Receive_Data = Uart5RxBuffer[2];
                        break;
                    case GET_ID_DATA:
                        Obtain_ID_Data = Uart5RxBuffer[2];
                        break;
                    default:
                        break;
                    }
                }

            }
        }
    }

}

/**
* @brief 串口通信程序
* @param
*len: 数据长度
*ID:  数据的类型
*data[len]:将要发送的数据
*CHK:数据的校验
* @return the return value
* @details a full description of what the function does
*/
void USART5_Data_Transmit(u8 len, u8 ID, u8 *data)
{
    u8 array[14];
    u8 i;
    u8 CHK;
    array[0] = 0xFD;
    array[1] = 0xDF;
    array[2] = len;
    array[3] = ID;
    for(i = 0; i < len - 5; i++) /**对data进行循环赋值**/
    {
        array[i + 4] = data[i];
    }
    CHK = CalculateCheckSum(len, data); /**数据的校验，数据的最后一位为校验位**/
    array[len - 1] = CHK;

    UART5_Send_Data(len, array); /**通过串口5发送数据**/

}
/**
 *@brief 数据的和校验:CHK
 *@param len:   数据的长度
 *@param array：接收到的数据组
 *@return sum：数据和为零
 *@details 发送的数据格式：
  ===============================================================================================
    标志1   |     标志2     |   数据长度  |  解析方法  |     发送的数据   |   数据的和校验
  ===============================================================================================
    Flag1   |     Flag2     |     Len     |     ID     |      Data(0-9)   |        CHK
	        |               |             |            |                  |
  -----------------------------------------------------------------------------------------------
    byte    |      byte     |      byte   |    byte    |     (1-10)bytes  |        byte
            |               |             |            |		          |
  -----------------------------------------------------------------------------------------------
 *@details 校验计算公式：
	CHK = ~(Len+Id + Data[0-9])+1.
**/
u8 CalculateCheckSum(u8 len, u8 *array)
{
    u8 sum = len;
    u8 i;
    for(i = 0; i < len - 2 - 1; i++) //数据的长度移除flag1,flag2,末位CHK
    {
        sum += array[i];
    }
    sum = ~sum + 1;

    return sum;
}
